name: Optimove Android Config Validation

on:
  push:
    branches: [ main, fix/241695-addCI ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  validate-android-config:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
    
    - name: Install required dependencies
      run: |
        npm install elementtree
    
    - name: Check for optimove.json
      working-directory: ./ExampleApp
      run: |
        if [ ! -f "optimove.json" ]; then
          if [ -f "Example - optimove.json" ]; then
            cp "Example - optimove.json" optimove.json
            echo "Created optimove.json from example file"
          else
            cat > optimove.json << 'EOT'
{
    "optimoveCredentials": "TEST_OPTIMOVE_CREDENTIALS",
    "optimoveMobileCredentials": "TEST_OPTIMOBILE_CREDENTIALS",
    "inAppConsentStrategy": "in-app-disabled",
    "android": {
        "pushNotificationIconName": "ic_notification"
    }
}
EOT
            echo "Created default optimove.json file"
          fi
        else
          echo "Using existing optimove.json file"
        fi
    
    - name: Create test script for Android only
      run: |
        cat > test-android-config.js << 'EOF'
const fs = require('fs');
const path = require('path');

// Create test directories
const testDir = path.join(process.cwd(), 'test');
const androidValuesDir = path.join(testDir, 'platforms', 'android', 'app', 'src', 'main', 'res', 'values');

// Ensure directories exist
fs.mkdirSync(androidValuesDir, { recursive: true });

// Copy optimove.json to test directory
fs.copyFileSync('ExampleApp/optimove.json', path.join(testDir, 'optimove.json'));

// Mock context object - only include android platform
const context = {
  opts: {
    projectRoot: testDir,
    platforms: ['android']
  }
};

// Extract necessary functions from inject-config.js
const injectConfigScript = fs.readFileSync('cordova-sdk/scripts/inject-config.js', 'utf8');

// Create a simplified version that only focuses on Android
const simplifiedScript = `
${injectConfigScript}

// Run only the Android part for testing
function testAndroidConfig() {
  const config = readOptimoveSettings(context);
  if (!config) {
    console.error("Failed to read optimove settings");
    process.exit(1);
  }
  
  const jsonWithDefaults = createJsonWithDefaultValues(
    config.optimoveCredentials,
    config.optimoveMobileCredentials,
    config.inAppConsentStrategy,
    config.enableDeferredDeepLinking,
    config.delayedInitialization || {},
    (config.delayedInitialization && config.delayedInitialization.featureSet) || {},
    config.android || {}
  );
  
  try {
    writeOptimoveXml(context, jsonWithDefaults);
    console.log("Successfully wrote Android config file");
    return true;
  } catch (error) {
    console.error("Error writing Android config:", error);
    return false;
  }
}

// Run the test
const result = testAndroidConfig();
if (!result) {
  process.exit(1);
}
`;

fs.writeFileSync('test-android-simplified.js', simplifiedScript);

// Run the actual test
console.log("Running Android config test...");
require('./test-android-simplified.js');
EOF

    - name: Run Android config test
      run: |
        node test-android-config.js
    
    - name: Verify Android config file was created
      run: |
        if [ -f "test/platforms/android/app/src/main/res/values/optimove.xml" ]; then
          echo "Android config file created successfully:"
          cat test/platforms/android/app/src/main/res/values/optimove.xml
          exit 0
        else
          echo "Error: Android config file was not created"
          exit 1
        fi
